// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: drivers/driver_service.proto

package drivers

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	generic "skeleton/pb/generic"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DriversServiceClient is the client API for DriversService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DriversServiceClient interface {
	List(ctx context.Context, in *DriverListInput, opts ...grpc.CallOption) (*Drivers, error)
	Create(ctx context.Context, in *Driver, opts ...grpc.CallOption) (*Driver, error)
	Update(ctx context.Context, in *Driver, opts ...grpc.CallOption) (*Driver, error)
	Delete(ctx context.Context, in *generic.Id, opts ...grpc.CallOption) (*generic.BoolMessage, error)
}

type driversServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDriversServiceClient(cc grpc.ClientConnInterface) DriversServiceClient {
	return &driversServiceClient{cc}
}

func (c *driversServiceClient) List(ctx context.Context, in *DriverListInput, opts ...grpc.CallOption) (*Drivers, error) {
	out := new(Drivers)
	err := c.cc.Invoke(ctx, "/skeleton.DriversService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driversServiceClient) Create(ctx context.Context, in *Driver, opts ...grpc.CallOption) (*Driver, error) {
	out := new(Driver)
	err := c.cc.Invoke(ctx, "/skeleton.DriversService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driversServiceClient) Update(ctx context.Context, in *Driver, opts ...grpc.CallOption) (*Driver, error) {
	out := new(Driver)
	err := c.cc.Invoke(ctx, "/skeleton.DriversService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driversServiceClient) Delete(ctx context.Context, in *generic.Id, opts ...grpc.CallOption) (*generic.BoolMessage, error) {
	out := new(generic.BoolMessage)
	err := c.cc.Invoke(ctx, "/skeleton.DriversService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DriversServiceServer is the server API for DriversService service.
// All implementations must embed UnimplementedDriversServiceServer
// for forward compatibility
type DriversServiceServer interface {
	List(context.Context, *DriverListInput) (*Drivers, error)
	Create(context.Context, *Driver) (*Driver, error)
	Update(context.Context, *Driver) (*Driver, error)
	Delete(context.Context, *generic.Id) (*generic.BoolMessage, error)
	//mustEmbedUnimplementedDriversServiceServer()
}

// UnimplementedDriversServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDriversServiceServer struct {
}

func (UnimplementedDriversServiceServer) List(context.Context, *DriverListInput) (*Drivers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDriversServiceServer) Create(context.Context, *Driver) (*Driver, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDriversServiceServer) Update(context.Context, *Driver) (*Driver, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDriversServiceServer) Delete(context.Context, *generic.Id) (*generic.BoolMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDriversServiceServer) mustEmbedUnimplementedDriversServiceServer() {}

// UnsafeDriversServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DriversServiceServer will
// result in compilation errors.
type UnsafeDriversServiceServer interface {
	mustEmbedUnimplementedDriversServiceServer()
}

func RegisterDriversServiceServer(s grpc.ServiceRegistrar, srv DriversServiceServer) {
	s.RegisterService(&DriversService_ServiceDesc, srv)
}

func _DriversService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverListInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriversServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skeleton.DriversService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriversServiceServer).List(ctx, req.(*DriverListInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriversService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Driver)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriversServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skeleton.DriversService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriversServiceServer).Create(ctx, req.(*Driver))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriversService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Driver)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriversServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skeleton.DriversService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriversServiceServer).Update(ctx, req.(*Driver))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriversService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(generic.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriversServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skeleton.DriversService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriversServiceServer).Delete(ctx, req.(*generic.Id))
	}
	return interceptor(ctx, in, info, handler)
}

// DriversService_ServiceDesc is the grpc.ServiceDesc for DriversService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DriversService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "skeleton.DriversService",
	HandlerType: (*DriversServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _DriversService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _DriversService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DriversService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DriversService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "drivers/driver_service.proto",
}
